i
Если этот флаг есть, то регэксп ищет независимо от регистра, то есть не различает между А и а.
g
Если этот флаг есть, то регэксп ищет все совпадения, иначе – только первое.
m
Многострочный режим.

var regexp = new RegExp("шаблон", "флаги");
var regexp = /шаблон/; // без флагов
var regexp = /шаблон/gmi; // с флагами gmi (изучим их дальше)

str.search(reg) - ONLY first
str.match(reg)  - ANY index input
str.split(reg|substr, limit)
str.replace(reg, str|func)
	$$	Вставляет "$".
	$&	Вставляет всё найденное совпадение.
	$`	Вставляет часть строки до совпадения.
	$'	Вставляет часть строки после совпадения.
	$*n*	где n -- цифра или двузначное число, обозначает n-ю по счёту скобку, если считать слева-направо.


	str – найденное совпадение,
	p1, p2, ..., pn – содержимое скобок (если есть),
	offset – позиция, на которой найдено совпадение,
	s – исходная строка.

regexp.test(str) true/false.
regexp.exec(str) regexp.lastIndex result.index



Для поиска только одного совпадения:
Найти позицию первого совпадения – str.search(reg).
Найти само совпадение – str.match(reg).
Проверить, есть ли хоть одно совпадение – regexp.test(str) или str.search(reg) != -1.
Найти совпадение с нужной позиции – regexp.exec(str), начальную позицию поиска задать в regexp.lastIndex.
Для поиска всех совпадений:
Найти массив совпадений – str.match(reg), с флагом g.
Получить все совпадения, с подробной информацией о каждом – regexp.exec(str) с флагом g, в цикле.
Для поиска-и-замены:
Замена на другую строку или результат функции – str.replace(reg, str|func)
Для разбивки строки на части:
str.split(str|reg)


=============

\d (от английского «digit» – «цифра») /g
Цифра, символ от 0 до 9.
\s (от английского «space» – «пробел»)
Пробельный символ, включая табы, переводы строки и т.п.
\w (от английского «word» – «слово»)
Символ «слова», а точнее – буква латинского алфавита или цифра или подчёркивание '_'. Не-английские буквы не являются \w, то есть русская буква не подходит.

Граница слова \b Например, \bJava\b найдёт слово Java в строке Hello, Java!, но не в строке Hello, Javascript!.
	Начало текста, если первый символ \w.
	Конец текста, если последний символ \w.
	Внутри текста, если с одной стороны \w, а с другой – не \w.
		Например, регэксп \b\d\d\b ищет отдельно двузначные числа. Иными словами, он требует, чтобы до и после \d\d был символ, отличный от \w (или начало/конец текста).


«Обратный» – означает, что ему соответствуют все остальные символы, например:

\D
Не-цифра, то есть любой символ кроме \d, например буква.
\S
Не-пробел, то есть любой символ кроме \s, например буква.
\W
Любой символ, кроме \w, то есть не латинница, не подчёркивание, не цифра. В частности, русские буквы принадлежат этому классу.
\B
Проверка, обратная \b.


Точка – любой символ В регулярном выражении, точка "." обозначает любой символ, кроме перевода строки:

Чтобы использовать специальный символ в качестве обычного, он должен быть экранирован.

Экранирование специальных символов [ \ ^ $ . | ? * + ( )

\ = . () / \ + - ^ [ Чтобы использовать специальный символ в качестве обычного, он должен быть экранирован.



Набор
Например, [еао] означает любой символ из этих трёх: 'а', 'е', или 'о'. Обратим внимание: несмотря на то, что в наборе указано несколько символов, в совпадении должен присутствовать ровно один из них.

диапазоны символов.
Например, [a-z] – произвольный символ от a до z, [0-5] – цифра от 0 до 5. Буква ё alert( str.match(/[\wа-яё]+/gi) );

Диапазоны «кроме»
[^…].

[] не нужно экранирование

Квантификаторы  +, *, ? и {n}

Количество {n}
	Точное количество: {5}
	Количество от-до: {3,5}
	Количество от-до бесконечности: {3,}
		Короткие обозначения
	+ {1,}. Например, \d+ находит числа – последовательности из 1 или более цифр:
	? {0,1} Означает «ноль или один», то же что и {0,1}. По сути, делает символ необязательным.
	* {0,} Означает «ноль или более», то же что {0,}. То есть, символ может повторяться много раз или вообще отсутствовать.

+ * - работает в жадном режиме

+? *? - работает в жадном режиме !!! ? = {0,1} ?? - добавляет ленивый режим !!! [^"]+ - не ленивый режим а другой алгоритм 

Скобочные группы

Часть шаблона может быть заключена в скобки (...). Такие выделенные части шаблона называют «скобочными выражениями» или «скобочными группами».

Без скобок, шаблон /go+/ означал бы g, после которого идёт одна или более o, например: goooo. А скобки «группируют» (go) вместе.
	скобочная группа нумеруется от по скобка слева на право и по дереву вложенности сверху вниз
Исключение из запоминания через ?: () - запоминает как массив найденого регексп и того что в скобках

(go)+ (?:go)+

$n - меняет результат МАТЧ местами по скобочным группам

\n - повторяет в шаблоне Регекспа скобочную группу В ТОЧНОСТИ НАЙДЕННУЮ ЕДИНОЖДЫ КАК В ПРЕДЫДУЩЕЙ


Альтернация (или) | - тоже самое что и [] но уже алтернируются не буквы (одна из букв) а фразы (одна из фраз)





Знак каретки '^' и доллара '$' имеют в регулярном выражении особый смысл. Их называют «якорями» (anchor – англ.).

Каретка ^ совпадает в начале текста, а доллар $ – в конце.






Взятие максимального количества повторений a+ без отката выглядит так: (?=(a+))\1.

То есть, иными словами, предпросмотр ?= ищет максимальное количество повторений a+, доступных с текущей позиции. А затем они «берутся в результат» обратной ссылкой \1. Дальнейший поиск – после найденных повторений.
